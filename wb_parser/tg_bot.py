import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import schedule
import threading
import time
from datetime import datetime
from parser import ParserWB


class WBTrackerBot:
    def __init__(self, token, superset_dashboard_url):
        self.bot = telebot.TeleBot(token)
        self.tracked_items = {}  # {chat_id: {article: {last_position: int, last_check: datetime}}}
        self.superset_dashboard_url = superset_dashboard_url  # –ü–æ–ª–Ω—ã–π URL –¥–∞—à–±–æ—Ä–¥–∞
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self.run_scheduler)
        self.scheduler_thread.start()

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.show_main_menu(message.chat.id)

        @self.bot.message_handler(func=lambda m: m.text == 'üìä –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
        def add_product(message):
            msg = self.bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ WB:")
            self.bot.register_next_step_handler(msg, self.process_article)

        @self.bot.message_handler(func=lambda m: m.text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        def show_analytics(message):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –¥–∞—à–±–æ—Ä–¥
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É üìä", 
                    url=self.superset_dashboard_url
                )
            )
            self.bot.send_message(
                message.chat.id,
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É:",
                reply_markup=markup
            )

    def process_article(self, message):
        try:
            article = int(message.text)
            if message.chat.id not in self.tracked_items:
                self.tracked_items[message.chat.id] = {}
            
            self.tracked_items[message.chat.id][article] = {
                'last_position': None,
                'history': []
            }
            
            self.bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä {article} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!")
        except ValueError:
            self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def show_main_menu(self, chat_id):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üìä –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìâ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã')
        markup.add('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    def run_scheduler(self):
        schedule.every(12).hours.do(self.check_positions)
        while True:
            schedule.run_pending()
            time.sleep(1)

    def check_positions(self):
        for chat_id, products in self.tracked_items.items():
            for article, data in products.items():
                current_position = self.get_current_position(article)
                
                if data['last_position'] and current_position != data['last_position']:
                    change = data['last_position'] - current_position
                    arrow = "‚¨ÜÔ∏è" if change > 0 else "‚¨áÔ∏è"
                    self.bot.send_message(
                        chat_id,
                        f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {article}:\n"
                        f"–ë—ã–ª–æ: {data['last_position']} ‚Üí –°—Ç–∞–ª–æ: {current_position} {arrow}\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {abs(change)} –ø–æ–∑–∏—Ü–∏–π"
                    )
                
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                analysis = self.analyze_competitors(article)
                self.send_recommendations(chat_id, article, analysis)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                data['last_position'] = current_position
                data['history'].append({
                    'date': datetime.now(),
                    'position': current_position
                })

    def get_current_position(self, article: int) -> int:
        query = self.get_saved_query_for_article(article)
        if not query:
            return None
            
        parser = ParserWB(query)
        result = parser.find_product_position(article, query)
        
        if result:
            # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
            self.save_product_data(article, result['product_data'])
            return result['position']
        
        return None

    def analyze_competitors(self, article) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        # –í–∞—à –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        return {
            'avg_price': 2500,
            'top_positions': [12345, 67890],
            'cpm_values': [10.5, 12.3, 15.0]
        }

    def send_recommendations(self, chat_id, article, analysis):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ–∫–ª–∞–º–µ"""
        markup = telebot.types.InlineKeyboardMarkup()
        btn = telebot.types.InlineKeyboardButton(
            text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫—É", 
            callback_data=f"edit_cpm_{article}")
        markup.add(btn)
        
        self.bot.send_message(
            chat_id,
            f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É {article}:\n"
            f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {analysis['avg_price']} —Ä—É–±\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞ CPM: {max(analysis['cpm_values']) * 1.2:.2f} —Ä—É–±\n\n"
            f"–î–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞ 10 –ø–æ–∑–∏—Ü–∏–π —É–≤–µ–ª–∏—á—å—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ 15%",
            reply_markup=markup
        )

    def run(self):
        self.bot.polling(none_stop=True)

if __name__ == "__main__":
    # –ü–æ–ª–Ω—ã–π URL –≤–∞—à–µ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –≤ Superset
    SUPERSET_DASHBOARD_URL = "https://i.pinimg.com/736x/a6/1e/1c/a61e1cad0c0970aabc9ce4f305589a5e.jpg"
    
    bot = WBTrackerBot(
        token="7603773242:AAGjg0RWeEjYPp__ySNJA9JswCMghi88z7A",
        superset_dashboard_url=SUPERSET_DASHBOARD_URL
    )
    bot.run()