import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import schedule
import threading
import time
from datetime import datetime, timedelta
from parser import ParserWB  
import matplotlib
matplotlib.use('Agg')  
from matplotlib import pyplot as plt
import matplotlib.dates as mdates
import io
import logging
import os


class WBTrackerBot:
    def __init__(self, token, superset_dashboard_url):
        self.setup_logging()
        
        self.logger = logging.getLogger(__name__)
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        self.bot = telebot.TeleBot(token)
        # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_id: {article: {query: {data}}}
        self.tracked_items = {}  
        self.superset_dashboard_url = superset_dashboard_url
        self.setup_handlers()
        
        self.scheduler_thread = threading.Thread(target=self.run_scheduler)
        self.scheduler_thread.daemon = True
        self.scheduler_thread.start()
        
        self.logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_file = 'bot.log'
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        if os.path.exists(log_file):
            with open(log_file, 'w',encoding='utf-8'):
                pass
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
            self.show_main_menu(message.chat.id)

        @self.bot.message_handler(func=lambda m: m.text == 'üìä –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
        def add_product(message):
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            self.bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—à–∞—Ä—Ñ'):")
            self.bot.register_next_step_handler(message, self.process_query)

        @self.bot.message_handler(func=lambda m: m.text == 'üìâ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è')
        def show_history(message):
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            self.handle_history_request(message.chat.id)
        
        @self.bot.message_handler(func=lambda m: m.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
        def remove_tracking(message):
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            self.handle_remove_tracking_request(message.chat.id)

        @self.bot.message_handler(func=lambda m: m.text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        def show_analytics(message):
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É üìä", url=self.superset_dashboard_url))
            self.bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É:", reply_markup=markup)
    
    def show_main_menu(self, chat_id):
        try:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('üìä –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
            markup.add('‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ','üìâ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è')
            self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            self.logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}", exc_info=True)
            raise

    def handle_history_request(self, chat_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            if chat_id not in self.tracked_items or not self.tracked_items[chat_id]:
                self.bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –∏–º–µ–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                return
            
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            
            for article in self.tracked_items[chat_id]:
                if isinstance(article, int): 
                    queries = self.tracked_items[chat_id][article]
                    for query, data in queries.items():
                        markup.add(f"–ò—Å—Ç–æ—Ä–∏—è: {article} ({query})")
            
            markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
            self.bot.send_message(
                chat_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:\n(–£–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª –∏ –∑–∞–ø—Ä–æ—Å)",
                reply_markup=markup
            )
            self.bot.register_next_step_handler_by_chat_id(chat_id, self.process_history_selection)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –ø–æ–∫–∞–∑–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", exc_info=True)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    def process_history_selection(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
                self.show_main_menu(message.chat.id)
                return
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª: {message.text}")
            
            parts = message.text.split('(')
            article = int(parts[0].split(':')[1].strip())
            query = parts[1].replace(')', '').strip()
            
            chat_id = message.chat.id
            
            if (chat_id in self.tracked_items and 
                article in self.tracked_items[chat_id] and 
                query in self.tracked_items[chat_id][article]):
                self.send_product_history(chat_id, article, query)
            else:
                self.bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                self.logger.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", exc_info=True)
            self.bot.send_message(
                message.chat.id, 
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."
            )
            self.handle_history_request(message.chat.id)

    def send_product_history(self, chat_id, article, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
        try:
            self.logger.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            
            parser = ParserWB(query)
            history = parser.get_product_history(article, query)
            
            if not history:
                self.bot.send_message(chat_id, f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ {article} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏.")
                self.show_main_menu(chat_id)
                self.logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article}")
                return
            
            days_ago = datetime.now() - timedelta(days=7)
            recent_history = [entry for entry in history if entry['date'] >= days_ago]
            
            if not recent_history:
                self.bot.send_message(chat_id, f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ {article} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
                self.show_main_menu(chat_id)
                self.logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article}")
                return
                
            history_sorted = sorted(recent_history, key=lambda x: x['date'])
            dates = [entry['date'] for entry in history_sorted]
            positions = [entry['position'] for entry in history_sorted]
            
            plt.figure(figsize=(12, 6))            
            plt.plot(dates, positions, 'b-', marker='o', linewidth=2, markersize=8)
            
            plt.gca().invert_yaxis()
            plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {article}\n–ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}"', pad=20)
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ü–æ–∑–∏—Ü–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ')
            plt.grid(True, linestyle='--', alpha=0.3)
            
            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m.%y'))
            plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.xticks(rotation=45, ha='right', fontsize=8)
            
            if len(positions) > 0:
                min_pos = min(positions)
                max_pos = max(positions)
                min_idx = positions.index(min_pos)
                max_idx = positions.index(max_pos)
                plt.annotate(f'–õ—É—á—à–∞—è: {min_pos}',
                            xy=(dates[min_idx], min_pos),
                            xytext=(10, 20), textcoords='offset points',
                            bbox=dict(boxstyle='round,pad=0.5', fc='lime', alpha=0.7),
                            arrowprops=dict(arrowstyle='->'))
                plt.annotate(f'–•—É–¥—à–∞—è: {max_pos}',
                            xy=(dates[max_idx], max_pos),
                            xytext=(10, -30), textcoords='offset points',
                            bbox=dict(boxstyle='round,pad=0.5', fc='red', alpha=0.3),
                            arrowprops=dict(arrowstyle='->'))
            plt.tight_layout()
            
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
            buf.seek(0)
            plt.close()
    
            history_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ {article} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            
            current_date = None
            for entry in history_sorted:
                entry_date = entry['date'].strftime('%d.%m.%Y')
                if entry_date != current_date:
                    history_text += f"\nüìÖ {entry_date}:\n"
                    current_date = entry_date
                
                history_text += (
                    f"üïí {entry['date'].strftime('%H:%M')}: "
                    f"–ü–æ–∑–∏—Ü–∏—è {entry['position']} | "
                    f"–¶–µ–Ω–∞: {entry['price']} —Ä—É–± | "
                    f"–û—Ç–∑—ã–≤—ã: {entry['feedbacks']}\n"
                )
            
            self.bot.send_message(chat_id, history_text[:4000])
            self.bot.send_photo(chat_id, photo=buf, 
                            caption=f'üìà –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {article}\n'
                                    f'–ó–∞–ø—Ä–æ—Å: "{query}" (7 –¥–Ω–µ–π)')
            
            self.show_main_menu(chat_id)
            self.logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", exc_info=True)
            self.bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article}.")
            self.show_main_menu(chat_id)
    
    def handle_remove_tracking_request(self, chat_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            if chat_id not in self.tracked_items or not self.tracked_items[chat_id]:
                self.bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            has_items_to_remove = any(
                isinstance(key, int) for key in self.tracked_items[chat_id].keys()
            )
        
            if not has_items_to_remove:
                self.bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –∏–º–µ–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            
            for key, value in self.tracked_items[chat_id].items():
                if isinstance(key, int):  # –≠—Ç–æ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
                    article = key
                    for query in value.keys():
                        markup.add(f"–£–¥–∞–ª–∏—Ç—å: {article} ({query})")
                
            markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
            self.bot.send_message(
                chat_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n(–£–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª –∏ –∑–∞–ø—Ä–æ—Å)",
                reply_markup=markup
            )
            self.bot.register_next_step_handler_by_chat_id(chat_id, self.process_remove_selection)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –ø–æ–∫–∞–∑–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {str(e)}", exc_info=True)
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    def process_remove_selection(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
                self.show_main_menu(message.chat.id)
                return
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ: {message.text}")
            
            parts = message.text.split('(')
            article = int(parts[0].split(':')[1].strip())
            query = parts[1].replace(')', '').strip()
            
            chat_id = message.chat.id
            
            if (chat_id in self.tracked_items and 
                article in self.tracked_items[chat_id] and 
                query in self.tracked_items[chat_id][article]):
                
                job_tag = f'track_{chat_id}_{article}_{query}'
                schedule.clear(job_tag)
                
                del self.tracked_items[chat_id][article][query]
                
                if not self.tracked_items[chat_id][article]:
                    del self.tracked_items[chat_id][article]
                
                self.bot.send_message(chat_id, f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {article} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' —É–¥–∞–ª–µ–Ω–æ.")
                self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {article} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            else:
                self.bot.send_message(chat_id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                self.logger.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            self.bot.send_message(
                message.chat.id, 
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞."
            )
        
        self.show_main_menu(message.chat.id)

    def process_query(self, message):
        try:
            query = message.text.lower()
            chat_id = message.chat.id
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª –∑–∞–ø—Ä–æ—Å: {query}")
            
            if query.isdigit():
                self.bot.send_message(
                    chat_id,
                    "‚ùå –í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ (–ø–æ—Ö–æ–∂–µ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞).\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—à–∞—Ä—Ñ—ã', '–∑–∏–º–Ω–∏–µ –∫—É—Ä—Ç–∫–∏')."
                )
                self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            if len(query) < 2:
                self.bot.send_message(chat_id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
                self.logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                return

            if chat_id not in self.tracked_items:
                self.tracked_items[chat_id] = {}
            
            self.tracked_items[chat_id]['current_query'] = query
            
            self.bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ WB, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:")
            self.bot.register_next_step_handler(message, lambda m: self.process_article(m, query))
            self.logger.info(f"–ó–∞–ø—Ä–æ—Å '{query}' –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
            self.bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    def process_article(self, message, query):
        try:
            article = int(message.text)
            chat_id = message.chat.id
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª –∞—Ä—Ç–∏–∫—É–ª: {article}")
            
            if chat_id not in self.tracked_items:
                self.tracked_items[chat_id] = {}
            
            self.bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4):")
            self.bot.register_next_step_handler(
                message, 
                lambda m: self.process_frequency(m, query, article)
            )
            self.logger.info(f"–ê—Ä—Ç–∏–∫—É–ª {article} –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
        except ValueError:
            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
            self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞: {str(e)}", exc_info=True)
            self.bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞.")

    def process_frequency(self, message, query, article):
        try:
            frequency = int(message.text)
            chat_id = message.chat.id
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∫–∞–∑–∞–ª —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫: {frequency}")
            
            if frequency < 1 or frequency > 24:
                raise ValueError("–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —Ä–∞–∑ –≤ –¥–µ–Ω—å")
            
            search_msg = self.bot.send_message(
                chat_id, 
                f"üîç –ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'..."
            )
            
            if chat_id not in self.tracked_items:
                self.tracked_items[chat_id] = {}
            if article not in self.tracked_items[chat_id]:
                self.tracked_items[chat_id][article] = {}
            
            self.tracked_items[chat_id][article][query] = {
                'frequency': frequency,
                'last_position': None
            }
            
            self.check_product_position(chat_id, article, query)
            
            self.bot.delete_message(chat_id, search_msg.message_id)
            self.setup_schedule(chat_id, article, query, frequency)
            
            self.bot.send_message(
                chat_id,
                f"‚úÖ –¢–æ–≤–∞—Ä {article} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!\n"
                f"–ó–∞–ø—Ä–æ—Å: '{query}'\n"
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {frequency} —Ä–∞–∑(–∞) –≤ –¥–µ–Ω—å"
            )
            
            self.logger.info(f"–¢–æ–≤–∞—Ä {article} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
        except ValueError as e:
            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {str(e)}")
            self.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}", exc_info=True)
            self.bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def check_product_position(self, chat_id, article, query):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞"""
        try:
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {article} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            parser = ParserWB(query)
            result = parser.find_product_position(article, query)
            
            if not result:
                self.bot.send_message(chat_id, f"‚ùå –¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
                self.logger.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
                return
            
            current_position = result['position']
            product_data = result.get('product_data', {})
            last_position = self.tracked_items[chat_id][article][query].get('last_position')
            
            if last_position is None:
                self.bot.send_message(
                    chat_id,
                    f"üîç –¢–æ–≤–∞—Ä {article} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n"
                    f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {current_position}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–¶–µ–Ω–∞: {product_data.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ä—É–±"
                )
                self.logger.info(f"–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ {article}: –ø–æ–∑–∏—Ü–∏—è {current_position}")
            elif current_position != last_position:
                change = last_position - current_position
                arrow = "‚¨ÜÔ∏è" if change > 0 else "‚¨áÔ∏è"
                self.bot.send_message(
                    chat_id,
                    f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {article} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n"
                    f"–ë—ã–ª–æ: {last_position} ‚Üí –°—Ç–∞–ª–æ: {current_position} {arrow}\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {abs(change)} –ø–æ–∑–∏—Ü–∏–π\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–¶–µ–Ω–∞: {product_data.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Ä—É–±"
                )
                self.logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {article}: {last_position} ‚Üí {current_position}")
            
            self.tracked_items[chat_id][article][query]['last_position'] = current_position
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {article}: {str(e)}", exc_info=True)
            self.bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–≤–∞—Ä–∞ {article}: {str(e)}")

    def setup_schedule(self, chat_id, article, query, frequency_per_day):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        try:
            interval = max(1, 24 // frequency_per_day)
            
            job_tag = f'track_{chat_id}_{article}_{query}'
            schedule.clear(job_tag)
            
            schedule.every(interval).hours.do(
                self.check_product_position, 
                chat_id, article, query
            ).tag(job_tag)
            
            self.logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {article}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}", exc_info=True)
            raise

    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á")
        while True:
            try:
                schedule.run_pending()
                time.sleep(1)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}", exc_info=True)
                time.sleep(10)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        while True:
            try:
                self.bot.polling(none_stop=True, timeout=30)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", exc_info=True)
                time.sleep(10)


if __name__ == "__main__":
    DASHBOARD_URL = "https://datalens.yandex.cloud/3imlj6hgfqdqp?_theme=dark&_lang=ru"
    TOKEN = "7603773242:AAGjg0RWeEjYPp__ySNJA9JswCMghi88z7A"
    bot = WBTrackerBot(
        token=TOKEN,
        superset_dashboard_url=DASHBOARD_URL
    )
    bot.run()